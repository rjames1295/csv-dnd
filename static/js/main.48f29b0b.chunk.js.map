{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["DARK_THEME","palette","type","primary","blue","secondary","red","useStyles","makeStyles","textCenter","textAlign","root","minWidth","highLighted","border","green","backgroundColor","mt5","marginTop","py5","paddingTop","paddingBottom","App","classes","useState","isDropping","setIsDropping","isParsing","setIsParsing","name","lastModified","size","fileInfo","setFileInfo","headerFields","setHeaderFields","parsedCSV","setParsedCSV","ThemeProvider","theme","createMuiTheme","CssBaseline","Container","maxWidth","className","Typography","variant","onDragLeave","onDragOver","e","preventDefault","onDrop","Array","from","dataTransfer","files","filter","file","forEach","a","text","result","parse","header","console","log","meta","fields","data","Card","CardContent","color","gutterBottom","CircularProgress","TableContainer","component","Paper","elevation","Table","TableHead","TableRow","map","index","TableCell","key","replace","trim","toUpperCase","TableBody","content","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.48f29b0b.chunk.js","sourcesContent":["import React, { useState } from \"react\"\nimport { parse } from \"papaparse\"\n\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport {\n    createMuiTheme,\n    ThemeProvider,\n    CssBaseline,\n    Container,\n    Typography,\n    Card,\n    CardContent,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    Paper,\n    TableBody,\n    CircularProgress\n} from \"@material-ui/core\"\nimport { green, blue, red } from \"@material-ui/core/colors\"\n\nconst DARK_THEME = {\n    palette: {\n        type: \"dark\",\n        primary: blue,\n        secondary: red\n    }\n}\n\nconst useStyles = makeStyles({\n    textCenter: {\n        textAlign: \"center\"\n    },\n    root: {\n        minWidth: 275\n    },\n    highLighted: {\n        border: `3px solid ${green[900]}`,\n        backgroundColor: green[600]\n    },\n    mt5: {\n        marginTop: \"3rem\"\n    },\n    py5: {\n        paddingTop: \"3rem\",\n        paddingBottom: \"3rem\"\n    }\n})\n\nconst humanizeHeaders = str =>\n    str\n        .replace(/_/g, \" \")\n        .replace(/([A-Z])/g, \" $1\")\n        .trim()\n        .toUpperCase()\n\nfunction App() {\n    const classes = useStyles()\n    const [isDropping, setIsDropping] = useState(false)\n    const [isParsing, setIsParsing] = useState(false)\n\n    const [fileInfo, setFileInfo] = useState({\n        name: \"\",\n        lastModified: \"\",\n        size: \"\",\n        type: \"\"\n    })\n    const [headerFields, setHeaderFields] = useState([])\n    const [parsedCSV, setParsedCSV] = useState([])\n\n    return (\n        <ThemeProvider theme={createMuiTheme(DARK_THEME)}>\n            <CssBaseline />\n            <Container maxWidth=\"lg\">\n                <div className={`${classes.textCenter} ${classes.mt5}`}>\n                    <Typography variant=\"h3\">CSV DND</Typography>\n                </div>\n\n                <div\n                    // onDragEnter={() => setIsDropping(true)}\n                    onDragLeave={() => setIsDropping(false)}\n                    onDragOver={e => {\n                        e.preventDefault()\n                        setIsDropping(true)\n                    }}\n                    onDrop={e => {\n                        e.preventDefault()\n                        setIsParsing(true)\n                        setIsDropping(false)\n\n                        Array.from(e.dataTransfer.files)\n                            .filter(file => file.type === \"text/csv\")\n                            .forEach(async file => {\n                                let text = await file.text()\n\n                                const result = parse(text, { header: true })\n\n                                console.log(result)\n\n                                setIsParsing(false)\n                                setFileInfo({\n                                    name: file.name,\n                                    lastModified: file.lastModified,\n                                    size: file.size,\n                                    type: file.type\n                                })\n                                setHeaderFields([...result.meta.fields])\n                                setParsedCSV([...result.data])\n                            })\n                    }}\n                >\n                    <Card\n                        className={`${classes.root} ${classes.py5} ${classes.mt5} ${\n                            isDropping ? classes.highLighted : \"\"\n                        }`}\n                    >\n                        <CardContent className={`${classes.textCenter}`}>\n                            <Typography variant=\"h5\" color=\"textSecondary\" gutterBottom>\n                                Drop a CSV file here\n                            </Typography>\n                            {fileInfo.name ? (\n                                <Typography variant=\"h6\" color=\"textSecondary\" gutterBottom>\n                                    {fileInfo.name}\n                                </Typography>\n                            ) : (\n                                <></>\n                            )}\n                        </CardContent>\n                    </Card>\n                </div>\n\n                <div className={classes.mt5}>\n                    {isParsing ? (\n                        <div className={classes.textCenter}>\n                            <CircularProgress />\n                        </div>\n                    ) : (\n                        <TableContainer component={Paper} elevation={4}>\n                            <Table>\n                                <TableHead>\n                                    <TableRow>\n                                        {headerFields.map((header, index) => (\n                                            <TableCell key={`${header}-${index}`}>{humanizeHeaders(header)}</TableCell>\n                                        ))}\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {parsedCSV.map((content, index) => (\n                                        <TableRow key={`content-${index}`}>\n                                            {headerFields.map((header, index) => (\n                                                <TableCell key={`content-${header}-${index}`}>\n                                                    {content[header]}\n                                                </TableCell>\n                                            ))}\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    )}\n                </div>\n\n                <ul></ul>\n            </Container>\n        </ThemeProvider>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}